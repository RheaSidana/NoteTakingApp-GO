// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	model "NoteApp/src/model"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: note, sessionID
func (_m *Repository) Create(note string, sessionID uint) (model.Note, error) {
	ret := _m.Called(note, sessionID)

	var r0 model.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint) (model.Note, error)); ok {
		return rf(note, sessionID)
	}
	if rf, ok := ret.Get(0).(func(string, uint) model.Note); ok {
		r0 = rf(note, sessionID)
	} else {
		r0 = ret.Get(0).(model.Note)
	}

	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(note, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: noteID
func (_m *Repository) Delete(noteID uint) (model.Note, error) {
	ret := _m.Called(noteID)

	var r0 model.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (model.Note, error)); ok {
		return rf(noteID)
	}
	if rf, ok := ret.Get(0).(func(uint) model.Note); ok {
		r0 = rf(noteID)
	} else {
		r0 = ret.Get(0).(model.Note)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(noteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: sessionId
func (_m *Repository) FindAll(sessionId uint) ([]model.Note, error) {
	ret := _m.Called(sessionId)

	var r0 []model.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]model.Note, error)); ok {
		return rf(sessionId)
	}
	if rf, ok := ret.Get(0).(func(uint) []model.Note); ok {
		r0 = rf(sessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(sessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
