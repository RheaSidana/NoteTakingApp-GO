// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	model "NoteApp/src/model"

	mock "github.com/stretchr/testify/mock"
)

// Session is an autogenerated mock type for the Session type
type Session struct {
	mock.Mock
}

// DeleteSessionID provides a mock function with given fields: sessionID
func (_m *Session) DeleteSessionID(sessionID string) (model.Session, error) {
	ret := _m.Called(sessionID)

	var r0 model.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Session, error)); ok {
		return rf(sessionID)
	}
	if rf, ok := ret.Get(0).(func(string) model.Session); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Get(0).(model.Session)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateSessionID provides a mock function with given fields: user, id
func (_m *Session) GenerateSessionID(user model.User, id uint) (string, error) {
	ret := _m.Called(user, id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(model.User, uint) (string, error)); ok {
		return rf(user, id)
	}
	if rf, ok := ret.Get(0).(func(model.User, uint) string); ok {
		r0 = rf(user, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(model.User, uint) error); ok {
		r1 = rf(user, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAuthenticate provides a mock function with given fields: sessionID
func (_m *Session) IsAuthenticate(sessionID string) (model.Session, error) {
	ret := _m.Called(sessionID)

	var r0 model.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Session, error)); ok {
		return rf(sessionID)
	}
	if rf, ok := ret.Get(0).(func(string) model.Session); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Get(0).(model.Session)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSession interface {
	mock.TestingT
	Cleanup(func())
}

// NewSession creates a new instance of Session. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSession(t mockConstructorTestingTNewSession) *Session {
	mock := &Session{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
